[[ ... ]] - optional ...
$blah - meta variable
# - comment

classDef := 

[[ [mode $symbol*]  ]]
[[ public ]] class $symbol : $type  [[ - $symbol* ]]
{
    # order shouldn't matter for these
    [[ $fieldDef* ]]
    [[ $methodDef* ]]
    [[ $constructorDef* ]]
    [[ $classDef ]]
}

interfaceDef :=

[[ public ]] interface $symbol : $type [[ - $symbol* ]]
{
    [[ $signature+ ]]
}

signature := $symbol : $type ;

#need a concrete type
type := $symbol 
      | '$symbol
      | $type -> $type 
      | ( $type )
      | [[ ('$symbol : $symbol* )* =>) $type 
      | $symbol<$type>
      |'$symbol<$type>

classType := $symbol 
          | $symbol<$type>

constructorDef :=

[[ [ mode $symbol ] ]]
[[ public ]] cons : $type ( $symbol* )
{
    $statement ; *
    $classDef*
}

methodDef := 

[[ public ]] $symbol : $type
{
    $statement*
    $classDef*
}

namespaceDef := 

using $symbol; *

namespace $symbol [[ . $symbolList ]] 
{
    $interfaceDef*
    $classDef*
    $methodDef*
}

lambda :=  ( $symbol * ) -> { *statements ; }
       | $symbol -> $expr 

foreach :=

# think this needs to be a non ' type
foreach var $symbol [[ : $type ]]  in $expr
{
    $statement ; *
}

while :=

while $expr
{
    $statement ; *
}

do :=

do ( $expr, $expr )
{
    $doExpr ; * 
}

doExpr := $symbol <- $expr
       | $expr
       | unit $expr

field/methodIndex := $expr . $symbol [[ <$type> ]] ( $expr * )

constructorCall := new $classType ( $expr* )

# probably needs to be a non ' type
functionCall := $expr ( $expr * )
             | $expr < $type > ( $expr * )

match :=

match $expr
{
    $matchExpr
}

# matchee keyword?
matchExpr := $symbol => $expr ;

constantDef := const $symbol [[ : $type ]] = $expr

varDef := var $symbol [[ : $type ]] = $expr

return := return $expr

yield := yield return | yield break

assignment := $symbol = $expr

boolean := true | false

number := 0 - 9 + [[ . 0 - 9 * ]]

string := "whatever"
        | [=*[ whatever ]=*]

comment := -- whatever
         | --[=*[ whatever  --]=*]

binaryExpr := 

ifStatement :=

if $expr
{
} 
[[ else if $expr
{
} ]]
[[ else
{
} ]]


